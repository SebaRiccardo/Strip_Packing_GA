import os
import random
import numpy as np
from os import chdir
from rectangle import generate_N_ractangles
from selection import select_tournament
from crossover import crossover
from mutate import mutate
from population import create_starting_population
from fitness import calculate_fitness
from utils import generate_stack_of_strips,get_best_individual, get_average_fitness, \
    stats,get_values_from_files,calculate_stats_per_instance,save_to_file
from plotting import plot_result, plot_rectangles,add_text_below,plot_individual_info,print_individual,print_best_individual,plot_stats,plot_stack_of_rectangles
from GLOBAL import POPULATION_SIZE, MAX_GENERATIONS, MUTATION_PROBABILITY, CROSS_OVER_PROBABILITY,TOURNAMENT_SIZE,RESULTS_FOLDER,instances

def GA(number_of_rectangles, values, W, genes, it_rotates,seed,run_number):

    random.seed(seed)

    # Generate reference rectangle list
    set_of_rectangles = generate_N_ractangles(number_of_rectangles,values)

    # Start inicial population
    population = create_starting_population(POPULATION_SIZE, W, set_of_rectangles, genes, calculate_fitness, it_rotates,seed)

    #print("Starting population.. ")
    #for p in population:
    #print(p)

    # initial stats
    best_ind = get_best_individual(population)
    average_fitness = [get_average_fitness(population)]
    best_fitness = [best_ind.fitness]
    best_individuals = [best_ind]
    best_fitness_ever = [best_ind.fitness]

    #prints the best individual
    #print_best_individual(best_ind, average_fitness[0], set_of_rectangles, W, it_rotates)

    # Plot the info of the first individual
    #plot_individual_info(best_ind,W, set_of_rectangles,RESULTS_FOLDER, it_rotates)

    for generation_number in range(MAX_GENERATIONS):
        # SELECTION
        selected = select_tournament(population, TOURNAMENT_SIZE, seed+generation_number)
        # CROSSOVER
        crossed_offspring = []
        for ind1, ind2 in zip(selected[::2], selected[1::2]):
            if random.random() < CROSS_OVER_PROBABILITY:
                children = crossover(ind1.gene_list, ind2.gene_list, W, set_of_rectangles, calculate_fitness, seed+generation_number, it_rotates)
                crossed_offspring.append(children[0])
                crossed_offspring.append(children[1])
            else:
                crossed_offspring.append(ind1)
                crossed_offspring.append(ind2)
        # MUTATION
        mutated = []
        for ind in crossed_offspring:
            if random.random() < MUTATION_PROBABILITY:
                mutated.append(mutate(ind.gene_list, W, set_of_rectangles, number_of_rectangles, calculate_fitness, seed+generation_number, it_rotates))
            else:
                mutated.append(ind)
        population = mutated.copy()

        # all values for the best individual in each generation
        best_ind, best_of_generation, best_fitness, average_fitness, best_fitness_ever = \
            stats(population, set_of_rectangles, W, best_ind, best_fitness, average_fitness, best_fitness_ever, it_rotates)

        #print(best_of_generation)

    #print("---------------------------")
    #print("Best individual generated by the GA: ", best_ind)
    #print("---------------------------")
    #plot_stats(average_fitness, best_fitness, best_fitness_ever,"run number: " + str(run_number+1), RESULTS_FOLDER)

    return best_ind



def test():
    data = [(50, 25), (50, 25), (30, 60), (30, 60)]
    rectangles = generate_N_ractangles(len(data), data)
    it_rotates = True

    population = create_starting_population(POPULATION_SIZE, rectangles, np.arange(len(data)), calculate_fitness,
                                            it_rotates)
    best = get_best_individual(population)

    chdir("../")
    i = 0
    images =[]
    for p in population:
        stack = generate_stack_of_strips(p.gene_list, p.rotation, rectangles, W, it_rotates)
        fig= add_text_below(p,rectangles,it_rotates,-0.07,.02,3,3,"black")
        plot_rectangles(fig,rectangles, stack, p, i, W, "results", it_rotates, "GAr")
        print(p)
        i = i + 1
def test2(rectangles):
    result =calculate_fitness([0, 3, 5, 1, 2, 7, 4, 6, 8],[1, 1, 1, 0, 1, 0, 0, 0, 1],rectangles,15,True)


def default_mode_menu(options):
    print("1. STRIP PACKING GA WITH ROTATION")
    print("2. STRIP PACKING GA WITHOUT ROTATION")
    value = input("")
    options["rotation"] = int(value)

    while options["rotation"] != 1 and options["rotation"] != 2:
        print("Choose a valid option,please:")
        print("1. STRIP PACKING GA WITH ROTATION ")
        print("2. STRIP PACKING GA WITHOUT ROTATION")
        options["rotation"] = int(input(""))
    return options

def experimental(number_of_runs):


    GAr_statistics = {}
    GAnr_statistics = {}

    # iterates over the whole instances
    for key,value in instances.items():

        #best individual in the 20 runs
        number_of_rectangles, rectangles_values, max_width = get_values_from_files(value)

        print("------- RECTANGLES (Instance:%s) ----------" % (value))
        for rec in rectangles_values:
            print(rec)

        W = max_width
        genes = np.arange(number_of_rectangles) # e.g: [0,1,2,3,4,5,6 ... (number_of_rectangles-1)]
        seeds = np.arange(number_of_runs) # seeds
        modes = [True,False]  # with rotation and without rotation

        #runs the GA in  mode rotation and mode no-rotation x number_of_runs
        for mode in modes:

            best_individuals = []

            print("Starting " +str(number_of_runs)+ " runs in with rotation enable: " + str(mode))
            for run in range(number_of_runs): #20 runs
               best_individuals.append(GA(number_of_rectangles,rectangles_values,max_width,genes,mode,seeds[run],run))

            if mode:
                best_individual_GAr = best_individuals.copy()
            else:
                best_individual_GAnr = best_individuals.copy()


        #number of results equals to 5.
        GAr_median, GAr_mean, GAr_best_fitness, GAr_stard_deviation, GAr_solution,GAr_stack = \
            calculate_stats_per_instance(best_individual_GAr,number_of_rectangles, rectangles_values, max_width, True)

        GAnr_median, GAnr_mean, GAnr_best_fitness, GAnr_stard_deviation, GAnr_solution,GAnr_stack = \
            calculate_stats_per_instance(best_individual_GAnr,number_of_rectangles, rectangles_values, max_width, False)

        GAr_statistics[key] = {
                               "median": GAr_median,
                               "mean": GAr_mean,
                               "best_fitness": GAr_best_fitness,
                               "standard_deviation": GAr_stard_deviation,
                               "solution" :GAr_solution,
                               "stack": GAr_stack,
                               }

        GAnr_statistics[key] = {
                               "median": GAnr_median,
                               "mean": GAnr_mean,
                               "best_fitness": GAnr_best_fitness,
                               "standard_deviation": GAnr_stard_deviation,
                               "solution" :GAnr_solution,
                               "stack": GAnr_stack
                               }

    return GAr_statistics , GAnr_statistics


if __name__ == '__main__':

    options = {
        "rotation": 0,
        "experimental":0
    }

    print("1. Experimental mode")
    print("2. Default mode")
    value = input("")
    options["experimental"] = int(value)

    while options["experimental"]!= 1 and options["experimental"]!= 2:
        print("Choose a valid option,please:")
        print("1. Experimental mode")
        print("2. Default mode")
        options["experimental"] = int(input(""))

    if options["experimental"] == 1:

        GAr_statistics, GAnr_statistics = experimental(20)

        print("Saving results to files...")
        save_to_file(GAr_statistics,"Genetic Algorithm with rotation")
        save_to_file(GAnr_statistics,"Genetic Algorithm with NO rotation")
        print("Results saved! in folder /results")
        print("Generating plots..")
        statistics = [GAr_statistics , GAnr_statistics]

        index = 0
        title = ["GAr","GAnr"]
        for stats in statistics:

            for key,value in GAr_statistics.items():
                subtitle = str(key) + title[index]
                caption =  str(key)
                plot_stack_of_rectangles(value["solution"], value["stack"], True, index, subtitle, caption)
            index = +1
        print("Plots generated..")

    else:
        options = default_mode_menu(options)

        if options["rotation"]==1:
            GA(number_of_rectangles, rectangles_values, W ,genes, True,0)
        else:
            GA(number_of_rectangles, rectangles_values, W, genes, False, 0)